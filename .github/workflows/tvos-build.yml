name: tvOS Build Size Check

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install
        
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Build tvOS app for simulator
      run: |
        cd ios
        xcodebuild -workspace TVTest.xcworkspace -scheme TVTest -configuration Release -destination 'platform=tvOS Simulator,name=Apple TV' build
        
    - name: Get app size
      run: |
        cd ios
        APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "TVTest.app" -type d)
        echo "App path: $APP_PATH"
        
        # 获取应用总大小
        APP_SIZE=$(du -sh "$APP_PATH" | cut -f1)
        echo "Total app size: $APP_SIZE"
        
        # 获取详细的大小信息
        echo "Detailed size information:"
        du -sh "$APP_PATH"/*
        
        # 使用新的环境文件语法设置输出
        echo "APP_SIZE=$APP_SIZE" >> $GITHUB_ENV
        echo "APP_SIZE=$APP_SIZE" >> $GITHUB_OUTPUT

    - name: Test tvOS render time
      run: |
        cd ios
        # 启动模拟器
        xcrun simctl boot "Apple TV"
        
        # 安装应用
        APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "TVTest.app" -type d)
        xcrun simctl install booted "$APP_PATH"
        
        # 启动应用并收集性能数据
        echo "Starting performance test..."
        
        # 使用 instruments 收集性能数据
        xcrun instruments -t Time\ Profiler -D performance.trace -w "Apple TV" com.TVTest &
        INSTRUMENTS_PID=$!
        
        # 等待应用启动
        sleep 5
        
        # 停止性能数据收集
        kill $INSTRUMENTS_PID
        
        # 分析性能数据
        echo "Analyzing performance data..."
        xcrun simctl spawn booted log show --predicate 'subsystem == "com.TVTest"' --last 5m | grep -E "viewDidLoad|viewDidAppear" > performance.log
        
        # 计算渲染时间
        VIEW_LOAD_TIME=$(grep "viewDidLoad" performance.log | head -n 1 | cut -d' ' -f1)
        VIEW_APPEAR_TIME=$(grep "viewDidAppear" performance.log | head -n 1 | cut -d' ' -f1)
        
        if [ ! -z "$VIEW_LOAD_TIME" ] && [ ! -z "$VIEW_APPEAR_TIME" ]; then
          RENDER_TIME=$(echo "$VIEW_APPEAR_TIME - $VIEW_LOAD_TIME" | bc)
          echo "ViewDidLoad to ViewDidAppear time: $RENDER_TIME seconds"
          echo "RENDER_TIME=$RENDER_TIME" >> $GITHUB_ENV
          echo "RENDER_TIME=$RENDER_TIME" >> $GITHUB_OUTPUT
        else
          echo "Could not find viewDidLoad or viewDidAppear timestamps"
        fi
        
        # 关闭模拟器
        xcrun simctl shutdown "Apple TV" 